cmake_minimum_required(VERSION 2.8.3)
project(nasa_robot_teleop)

if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
endif()

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)
include(${QT_USE_FILE})
add_definitions(-DQT_NO_KEYWORDS)

set(QT_FORMS 
  ${PROJECT_SOURCE_DIR}/ui/rviz_interactive_controls_panel.ui 
  ${PROJECT_SOURCE_DIR}/ui/group_controls_widget.ui
  ${PROJECT_SOURCE_DIR}/ui/multi_group_controls_widget.ui
  ${PROJECT_SOURCE_DIR}/ui/navigation_controls_widget.ui)

qt4_wrap_cpp(MOC_FILES
    src/GroupControlsWidget.hpp
    src/InteractiveControlsInterfaceUtils.hpp
    src/MultiGroupControlsWidget.hpp
    src/NavigationControlsWidget.hpp
	  src/RosparamDialog.hpp
    src/RVizInteractiveControlsPanel.hpp
)
qt4_wrap_ui(QT_FORMS_HPP ${QT_FORMS})
# qt4_add_resources(QT_RESOURCES ${QT_RESS})

set(SRC_FILES
    src/GroupControlsWidget.cpp
    src/InteractiveControlsInterfaceUtils.cpp
    src/MultiGroupControlsWidget.cpp
    src/NavigationControlsWidget.cpp
	  src/RosparamDialog.cpp
    src/RVizInteractiveControlsPanel.cpp
    ${MOC_FILES}
)


## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED roscpp rospy rviz std_msgs trajectory_msgs geometry_msgs message_generation control_msgs moveit_msgs genmsg actionlib_msgs actionlib)


## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  JointPlanRequestSpecification.msg
  CartesianPlanRequestSpecification.msg
  PlanGroupConfiguration.msg
  JointNameMap.msg
  JointMask.msg
  ToleranceInfo.msg
  ToleranceInfoArray.msg
  StringArray.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  AddGroup.srv
  RemoveGroup.srv
  EndEffectorCommand.srv
  JointPlanCommand.srv
  CartesianPlanCommand.srv
  ExecuteCommand.srv
  ConfigurePlanningService.srv
  GetPlanningServiceConfiguration.srv
  GetJointNames.srv
  InteractiveControlsInterface.srv
  GetHandType.srv
)

## Generate actions in the 'action' folder
add_action_files(
  DIRECTORY
  action
  FILES
  GripperCommand.action
)

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs  # Or other packages containing msgs
  trajectory_msgs
  geometry_msgs
  control_msgs
  moveit_msgs
  actionlib_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
   # INCLUDE_DIRS nasa_robot_teleop
   # LIBRARIES nasa_robot_teleop
   CATKIN_DEPENDS rviz 
   DEPENDS system_lib
)

###########
## Build ##
###########

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR}
)


## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)

## Declare a cpp library
# add_library(nasa_robot_teleop
#   src/${PROJECT_NAME}/nasa_robot_teleop.cpp
# )

## Declare a cpp executable
# add_executable(nasa_robot_teleop_node src/nasa_robot_teleop_node.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(nasa_robot_teleop_node nasa_robot_teleop_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(nasa_robot_teleop_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS nasa_robot_teleop nasa_robot_teleop_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_nasa_robot_teleop.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

add_library(${PROJECT_NAME} ${SRC_FILES} ${QT_FORMS_HPP} ${QT_RESOURCES})

# Specify libraries to link a library or executable target against
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES})
add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})
